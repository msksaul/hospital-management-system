generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id                       String           @id
  first_name               String
  last_name                String
  date_of_birth            DateTime
  gender                   Gender           @default(MALE)
  phone                    String
  email                    String           @unique
  marital_status           String
  address                  String
  emergency_contact_name   String
  emergency_contact_number String
  relation                 String
  blood_group              String?
  allergies                String?
  medical_conditions       String?
  medical_history          String?
  insurance_provider       String?
  insurance_number         String?
  privacy_consent          Boolean
  service_consent          Boolean
  medical_consent          Boolean
  img                      String?
  colorCode                String?
  created_at               DateTime         @default(now())
  updated_at               DateTime         @updatedAt
  appointments             Appointment[]
  medical                  MedicalRecords[]
  payments                 Payment[]
  ratings                  Rating[]
}

model Doctor {
  id                  String        @id
  email               String        @unique
  name                String
  specialization      String
  license_number      String
  phone               String
  address             String
  department          String?
  img                 String?
  colorCode           String?
  availability_status String?
  type                JOBTYPE       @default(FULL)
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  appointments        Appointment[]
  diagnosis           Diagnosis[]
  ratings             Rating[]
  working_days        WorkingDays[]
}

model WorkingDays {
  id         Int      @id @default(autoincrement())
  doctor_id  String
  day        String
  start_time String
  close_time String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  doctor     Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
}

model Staff {
  id             String   @id
  email          String   @unique
  name           String
  phone          String
  address        String
  department     String?
  img            String?
  license_number String?
  colorCode      String?
  role           Role
  status         Status   @default(ACTIVE)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Appointment {
  id               Int               @id @default(autoincrement())
  patient_id       String
  doctor_id        String
  appointment_date DateTime
  time             String
  status           AppointmentStatus @default(PENDING)
  type             String
  note             String?
  reason           String?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  doctor           Doctor            @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  patient          Patient           @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  medical          MedicalRecords[]
  bills            Payment?
}

model Payment {
  id             Int            @id @default(autoincrement())
  bill_id        Int?
  patient_id     String
  appointment_id Int            @unique
  bill_date      DateTime
  payment_date   DateTime
  discount       Float
  total_amount   Float
  amount_paid    Float
  payment_method PaymentMethod  @default(CASH)
  status         PaymentStatus  @default(UNPAID)
  receipt_number Int            @default(autoincrement())
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  bills          PatientBills[]
  appointment    Appointment    @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient        Patient        @relation(fields: [patient_id], references: [id], onDelete: Cascade)
}

model PatientBills {
  id           Int      @id @default(autoincrement())
  bill_id      Int
  service_id   Int
  service_date DateTime
  quantity     Int
  unit_cost    Float
  total_cost   Float
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  payment      Payment  @relation(fields: [bill_id], references: [id], onDelete: Cascade)
  service      Services @relation(fields: [service_id], references: [id])
}

model LabTest {
  id             Int            @id @default(autoincrement())
  record_id      Int
  test_date      DateTime
  result         String
  status         String
  notes          String?
  service_id     Int            @unique
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  medical_record MedicalRecords @relation(fields: [record_id], references: [id], onDelete: Cascade)
  services       Services       @relation(fields: [service_id], references: [id])
}

model MedicalRecords {
  id             Int          @id @default(autoincrement())
  patient_id     String
  appointment_id Int
  doctor_id      String
  treatment_plan String?
  prescriptions  String?
  lab_request    String?
  notes          String?
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  diagnosis      Diagnosis[]
  lab_test       LabTest[]
  appointment    Appointment  @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient        Patient      @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  vital_signs    VitalSigns[]
}

model VitalSigns {
  id                Int            @id @default(autoincrement())
  patient_id        String
  medical_id        Int
  body_temperature  Float
  systolic          Int
  diastolic         Int
  heartRate         String
  respiratory_rate  Int?
  oxygen_saturation Int?
  weight            Float
  height            Float
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  medical           MedicalRecords @relation(fields: [medical_id], references: [id], onDelete: Cascade)
}

model Diagnosis {
  id                     Int            @id @default(autoincrement())
  patient_id             String
  medical_id             Int
  doctor_id              String
  symptoms               String
  diagnosis              String
  notes                  String?
  prescribed_medications String?
  follow_up_plan         String?
  created_at             DateTime       @default(now())
  updated_at             DateTime       @updatedAt
  doctor                 Doctor         @relation(fields: [doctor_id], references: [id])
  medical                MedicalRecords @relation(fields: [medical_id], references: [id], onDelete: Cascade)
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  user_id    String
  record_id  String
  action     String
  details    String?
  model      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Rating {
  id         Int      @id @default(autoincrement())
  staff_id   String
  patient_id String
  rating     Int
  comment    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  patient    Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doctor     Doctor   @relation(fields: [staff_id], references: [id], onDelete: Cascade)
}

model Services {
  id           Int            @id @default(autoincrement())
  service_name String
  description  String
  price        Float
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  labtest      LabTest?
  bills        PatientBills[]
}

enum Role {
  ADMIN
  NURSE
  DOCTOR
  LAB_TECHNICIAN
  PATIENT
  CASHIER
}

enum Status {
  ACTIVE
  INACTIVE
  DORMANT
}

enum JOBTYPE {
  FULL
  PART
}

enum Gender {
  MALE
  FEMALE
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  CASH
  CARD
}

enum PaymentStatus {
  PAID
  UNPAID
  PART
}
